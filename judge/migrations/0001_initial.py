# Generated by Django 3.1.4 on 2020-12-27 17:22

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('full_name', models.CharField(max_length=70, verbose_name='Nome completo')),
                ('email', models.EmailField(max_length=254, unique=True, verbose_name='Email')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'Usuário',
                'verbose_name_plural': 'Usuários',
            },
        ),
        migrations.CreateModel(
            name='StrAsModelName',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=50, verbose_name='Nome')),
            ],
        ),
        migrations.CreateModel(
            name='Student',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('registration_number', models.IntegerField(help_text='Digite a matrícula somente com números. Ex 160123456', unique=True, verbose_name='Matrícula')),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.RESTRICT, to=settings.AUTH_USER_MODEL, verbose_name='Usuário')),
            ],
            options={
                'verbose_name': 'Aluno',
                'verbose_name_plural': 'Alunos',
            },
        ),
        migrations.CreateModel(
            name='CourseClass',
            fields=[
                ('strasmodelname_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='judge.strasmodelname')),
                ('year', models.IntegerField(verbose_name='Ano')),
                ('semester', models.IntegerField(choices=[(1, 1), (2, 3)], verbose_name='Semestre')),
            ],
            options={
                'verbose_name': 'Turma',
                'verbose_name_plural': 'Turmas',
            },
            bases=('judge.strasmodelname',),
        ),
        migrations.CreateModel(
            name='Question',
            fields=[
                ('strasmodelname_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='judge.strasmodelname')),
                ('description', models.TextField(verbose_name='Enunciado')),
                ('subject', models.CharField(choices=[('SEQ', 'Estruturas Sequenciais e Condicionais'), ('MOD', 'Modularização'), ('COND', 'Estruturas Concidionais e de Repetição'), ('VET', 'Vetores')], max_length=60, verbose_name='Assunto')),
            ],
            options={
                'verbose_name': 'Questão',
                'verbose_name_plural': 'Questões',
            },
            bases=('judge.strasmodelname',),
        ),
        migrations.CreateModel(
            name='Professor',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.RESTRICT, to=settings.AUTH_USER_MODEL, verbose_name='Usuário')),
            ],
            options={
                'verbose_name': 'Professor',
                'verbose_name_plural': 'Professores',
            },
        ),
        migrations.CreateModel(
            name='TestCase',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('inputs', models.TextField(help_text='Cada entrada separada por vírgula e em ordem de leitura.', verbose_name='Entradas')),
                ('output', models.TextField(help_text='String única com \\n explícito se necessário.', verbose_name='Saída')),
                ('question', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='cases', to='judge.question', verbose_name='Questão')),
            ],
            options={
                'verbose_name': 'Caso de Teste',
                'verbose_name_plural': 'Casos de Teste',
            },
        ),
        migrations.CreateModel(
            name='Submission',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('code', models.TextField(verbose_name='Código')),
                ('submitted_at', models.DateTimeField(auto_now_add=True, verbose_name='Submetido em')),
                ('judged_at', models.DateTimeField(blank=True, editable=False, null=True, verbose_name='Julgado em')),
                ('result', models.CharField(blank=True, choices=[('ACCEPTED', 'Aceito'), ('WRONG_ANSWER', 'Resposta Incorreta'), ('PRESENTATION_ERROR', 'Erro de Apresentação'), ('COMPILATION_ERROR', 'Erro de Compilação'), ('RUNTIME_ERROR', 'Erro de Execução'), ('TIME_LIMIT_EXCEEDED', 'Limite de Tempo Excedido'), ('MEMORY_LIMIT_EXCEEDED', 'Limite de Memória Excedido'), ('POSSIBLE_RUNTIME_ERROR', 'Possível Erro de Execução')], editable=False, max_length=30, null=True, verbose_name='Resultado')),
                ('student', models.ForeignKey(on_delete=django.db.models.deletion.RESTRICT, related_name='submissions', to='judge.student', verbose_name='Aluno')),
                ('question', models.ForeignKey(on_delete=django.db.models.deletion.RESTRICT, related_name='submissions', to='judge.question', verbose_name='Questão')),
            ],
            options={
                'verbose_name': 'Submissão',
                'verbose_name_plural': 'Submissões',
            },
        ),
        migrations.AddField(
            model_name='student',
            name='classes',
            field=models.ManyToManyField(blank=True, related_name='students', to='judge.CourseClass', verbose_name='Turmas'),
        ),
        migrations.CreateModel(
            name='QuestionList',
            fields=[
                ('strasmodelname_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='judge.strasmodelname')),
                ('questions', models.ManyToManyField(related_name='lists', to='judge.Question', verbose_name='Questões')),
            ],
            options={
                'verbose_name': 'Lista de Exercícios',
                'verbose_name_plural': 'Listas de Exercicíos',
            },
            bases=('judge.strasmodelname',),
        ),
        migrations.CreateModel(
            name='ListSchedule',
            fields=[
                ('strasmodelname_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='judge.strasmodelname')),
                ('start_date', models.DateTimeField(verbose_name='Data de Início')),
                ('due_date', models.DateTimeField(verbose_name='Data de Término')),
                ('course_class', models.ForeignKey(on_delete=django.db.models.deletion.RESTRICT, related_name='schedules', to='judge.courseclass', verbose_name='Turma')),
                ('question_list', models.ForeignKey(on_delete=django.db.models.deletion.RESTRICT, related_name='schedules', to='judge.questionlist', verbose_name='Lista de Exercícios')),
            ],
            options={
                'verbose_name': 'Agendamento de Lista',
                'verbose_name_plural': 'Agendamentos de Listas',
            },
            bases=('judge.strasmodelname',),
        ),
        migrations.AddField(
            model_name='courseclass',
            name='professor',
            field=models.ForeignKey(on_delete=django.db.models.deletion.RESTRICT, related_name='classes', to='judge.professor', verbose_name='Professor'),
        ),
    ]
